<?php

$cfgFile = "/root/torpanel-gateway.json";
if (!file_exists($cfgFile)) { die("ERROR: Missing config file '$cfgFile'\n"); }
$cfg = (object)json_decode($cfgFile);
if (!isset($cfg->apikey)) { die("ERROR: Missing apikey from config\n"); }
if (!isset($cfg->master)) { die("ERROR: Missing master from config\n"); }

// Download a new list of domains
$url = "http://{$cfg->master}/api/v1/gateway-download.php?apikey={$cfg->apikey}";
$response = file_get_contents($url);
if (!$response) { die("ERROR: Unable to download domains\n"); }
$response = json_decode($response);
if (!$response) { die("ERROR: No JSON response\n"); }

if (@intval($response->ok) <= 0) {
  if (isset($response->reason)) { die("ERROR: Server did not respond with OK ({$response->reason})\n"); }
  die("ERROR: Server did not respond with OK no reason given\n");
}

if (empty($response->domains)) { return; }

// Generate the torrc file and compare it against the current
// file and if changed restart tor

$torrc = "

# Generated from torpanel-gateway

# Required so that Tor loads on Whonix
DisableNetwork 0

# Each gateway gets a random domain
HiddenServiceDir /var/lib/tor/tp-gateway
HiddenServicePort 22 10.152.152.10:22
HiddenServicePort 80 10.152.152.10:80

";

foreach ($response->domains as $domain) {
  // Tor stores each hidden service in it's own directory
  $dir = "/var/lib/tor/tp-{$domain->id}";

  // A private key file is either generated by Tor or written by us
  $privateKeyFile = "$dir/private_key";

  if (strlen($domain->privateKey)) {
    $install = true;

    // Server is sending us a private key
    if (file_exists($privateKeyFile)) {
      // Existing private key exists so we check it
      $text = trim(file_get_contents($privateKeyFile));

      if ($text === trim($domain->privateKey)) {
        // Don't re-install the same private key
        $install = false;
      }
    }

    if ($install) {
      // No private key exists yet so we install it
      if (!is_dir($dir)) { mkdir($dir); }
      file_put_contents($privateKeyFile, $domain->privateKey);
      passthru("chown debian-tor:debian-tor -R $dir");
    }
  } else {
    // Server wants us to generate a new key and send it back
    unlink($privateKeyFile);
  }

  $torrc .= "\n";
  $torrc .= "# Domain {$domain->id} \n";
  $torrc .= "HiddenServiceDir $dir \n";
  $torrc .= "HiddenServicePort 80 10.152.152.20:80 \n";
  $torrc .= "HiddenServicePort 22 10.152.152.20:20 \n";
  $torrc .= "\n";
}

$torrc_old = @trim(file_get_contents("/etc/tor/torrc"));

if ($torrc_old !== trim($torrc)) {
  file_put_contents("/etc/tor/torrc", $torrc);
  passthru("/usr/sbin/service tor reload");
  sleep(5);
}

$update = [];

foreach ($response->domains as $domain) {
  $dir = "/var/lib/tor/tp-{$domain->id}";
  $privateKeyFile = "$dir/private_key";
  $disk = @trim(file_get_contents($privateKeyFile));
  $server = @trim($domain->privateKey);
  if ($disk !== $server) { $update[$domain->id] = $disk; }
}

$context  = stream_context_create([
  'http' => [
    'method'  => 'POST',
    'header'  => 'Content-type: application/x-www-form-urlencoded',
    'content' => ['update' => $update]
  ]
]);

$response = file_get_contents("http://{$cfg->master}/api/v1/gateway-upload.php?apikey={$cfg->apikey}", false, $context);
if (!$response) { die("ERROR: Network error while uploading\n"); }
$response = json_decode($response);
if (!$response) { die("ERROR: Invalid JSON response when uploading\n"); }
if (@intval($response->ok) <= 0) { die("ERROR: Server was not OK with upload ({$response->reason})\n"); }
